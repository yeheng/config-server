//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "sys_user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub user_id: i64,
    pub user_name: String,
    pub nick_name: String,
    pub user_type: Option<i16>,
    pub email: Option<String>,
    pub phonenumber: Option<String>,
    pub sex: Option<i16>,
    #[sea_orm(column_type = "Text", nullable)]
    pub avatar: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub cover: Option<String>,
    pub password: Option<String>,
    pub status: Option<i16>,
    pub del_flag: Option<i16>,
    pub remark: Option<String>,
    pub level_id: Option<i64>,
    pub dept_id: Option<i64>,
    pub parent_id: Option<i64>,
    pub cur_to_top: Option<String>,
    pub top_to_cur: Option<String>,
    pub wechat: Option<String>,
    pub weichat_openid: Option<String>,
    pub qq: Option<String>,
    pub weibo: Option<String>,
    pub weibo_openid: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub decs: Option<String>,
    pub r#type: Option<i16>,
    pub is_hot: Option<i16>,
    pub hot_count: Option<i32>,
    pub is_elite: Option<i16>,
    pub elite_count: Option<i32>,
    pub lecturer_name: Option<String>,
    pub lecturer_level: Option<i16>,
    pub lecturer_card_no: Option<String>,
    pub is_vote: Option<i16>,
    pub vote_count: Option<i32>,
    pub indx: Option<i16>,
    pub batch_no: Option<String>,
    pub follow_count: Option<i64>,
    pub real_follow_count: Option<i64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub tags: Option<String>,
    pub account_prefix: Option<String>,
    pub share_user_id: Option<i64>,
    pub created_by: Option<i64>,
    pub created_time: DateTime,
    pub updated_by: Option<i64>,
    pub updated_time: DateTime,
    pub login_ip: Option<String>,
    pub login_date: Option<DateTime>,
    pub virtual_role: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
